version: '3.8'

services:
  surreal-sync-dev:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ../..:/workspace:cached
    command: sleep infinity
    networks:
      - surreal-sync-network
    depends_on:
      - surrealdb
      - mongodb
      - mongodb-init
      - neo4j
      - postgresql
      - mysql
      - kafka

  surrealdb:
    image: surrealdb/surrealdb:latest
    # We intentionally avoid forwarding ports to avoid conflicts with other services running on the host.
    # ports:
    #   - "8000:8000"
    command: start --log trace --user root --pass root memory
    networks:
      - surreal-sync-network

  mongodb:
    image: mongo:7
    # We intentionally avoid forwarding ports to avoid conflicts with other services running on the host.
    # ports:
    #   - "27017:27017"
    # For development, we disable auth to avoid keyFile complexity
    command: mongod --replSet rs0 --bind_ip_all --noauth
    volumes:
      - mongodb_data:/data/db
    networks:
      - surreal-sync-network
    healthcheck:
      test: |
        mongosh --quiet --eval "db.adminCommand('ping')" || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Helper service to initialize MongoDB replica set
  mongodb-init:
    image: mongo:7
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - surreal-sync-network
    command: >
      mongosh --host mongodb:27017 --quiet --eval "
        try {
          rs.status();
          print('Replica set already configured');
        } catch (e) {
          print('Initializing replica set...');
          rs.initiate({
            _id: 'rs0',
            members: [{ _id: 0, host: 'mongodb:27017' }]
          });
          print('Replica set initialized');

          // Wait for replica set to become primary
          while (!db.isMaster().ismaster) {
            sleep(1000);
          }

          // Create root user for compatibility with tests
          // Note: This will only work after replica set is initialized
          db = db.getSiblingDB('admin');
          try {
            db.createUser({
              user: 'root',
              pwd: 'root',
              roles: ['root']
            });
            print('Root user created');
          } catch(e) {
            print('User creation skipped: ' + e);
          }
        }
      "
    restart: "no"

  neo4j:
    image: neo4j:5
    # We intentionally avoid forwarding ports to avoid conflicts with other services running on the host.
    # ports:
    #   - "7474:7474"
    #   - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_default__database=neo4j
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - surreal-sync-network

  # PostgreSQL service for future incremental sync support
  postgresql:
    image: postgres:16
    # We intentionally avoid forwarding ports to avoid conflicts with other services running on the host.
    # ports:
    #   - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=testdb
    command: >
      postgres
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c track_commit_timestamp=on
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - surreal-sync-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL service for future incremental sync support
  mysql:
    image: mysql:8.0
    # We intentionally avoid forwarding ports to avoid conflicts with other services running on the host.
    # ports:
    #   - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=testdb
      - MYSQL_USER=mysql
      - MYSQL_PASSWORD=mysql
    command: >
      --default-authentication-plugin=mysql_native_password
      --log-bin=mysql-bin
      --binlog-format=ROW
      --binlog-row-image=FULL
      --expire-logs-days=1
      --server-id=1
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - surreal-sync-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: apache/kafka:latest
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - surreal-sync-network
    # We intentionally avoid forwarding ports to avoid conflicts with other services running on the host.
    # ports:
    #   - "9092:9092"

networks:
  surreal-sync-network:
    driver: bridge

volumes:
  mongodb_data:
  neo4j_data:
  neo4j_logs:
  postgresql_data:
  mysql_data:

//! MySQL all-types incremental sync ONLY E2E test
//!
//! This test validates that MySQL incremental sync operations work correctly
//! by starting with empty tables, running full sync to generate checkpoint and setup
//! triggers, then adding data and running incremental sync.

use surreal_sync::testing::{
    connect_surrealdb, create_unified_full_dataset, generate_test_id, TestConfig,
};
use surreal_sync::{SourceOpts, SurrealOpts};

#[tokio::test]
async fn test_mysql_incremental_sync_lib() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize tracing for debug output
    tracing_subscriber::fmt()
        .with_env_filter("surreal_sync=debug")
        .try_init()
        .ok();

    let test_id = generate_test_id();

    // Clean up checkpoint directory to prevent cross-test contamination
    surreal_sync::testing::checkpoint::cleanup_checkpoint_dir(".test-checkpoints")?;

    // Setup MySQL connection
    let mysql_config = surreal_sync::testing::mysql::create_mysql_config();
    let pool = mysql_async::Pool::from_url(mysql_config.get_connection_string())?;
    let mut mysql_conn = pool.get_conn().await?;

    let dataset = create_unified_full_dataset();

    // Setup SurrealDB connection
    let surreal_config = TestConfig::new(test_id, "mysql-incremental-only");
    let surreal = connect_surrealdb(&surreal_config).await?;
    surreal_sync::testing::test_helpers::cleanup_surrealdb(&surreal, &dataset).await?;

    // Clean up any existing test data
    surreal_sync::testing::mysql::cleanup_mysql_test_data(&mut mysql_conn).await?;
    surreal_sync::testing::mysql::create_tables_and_indices(&mut mysql_conn, &dataset).await?;

    let source_opts = SourceOpts {
        source_uri: mysql_config.get_connection_string(),
        source_database: Some("testdb".to_string()),
        source_username: None,
        source_password: None,
        neo4j_timezone: "UTC".to_string(),
        neo4j_json_properties: None,
        mysql_boolean_paths: Some(vec!["all_types_posts.post_categories".to_string()]),
    };

    let surreal_opts = SurrealOpts {
        surreal_endpoint: surreal_config.surreal_endpoint.clone(),
        surreal_username: "root".to_string(),
        surreal_password: "root".to_string(),
        batch_size: 1000,
        dry_run: false,
    };

    // We need to use the checkpoint-enabled version to set up triggers
    // Create a sync config for checkpoint emission
    let sync_config = surreal_sync::sync::SyncConfig {
        incremental: false, // This is full sync to set up infrastructure
        incremental_from: None,
        emit_checkpoints: true,
        checkpoint_dir: Some(".test-checkpoints".to_string()),
    };

    let surreal2 = surreal_sync::connect::connect_to_surrealdb(
        &surreal_opts,
        surreal_config.surreal_namespace.clone(),
        surreal_config.surreal_database.clone(),
    )
    .await?;

    // Run full sync to set up triggers and get checkpoint
    surreal_sync::mysql::run_full_sync(&source_opts, &surreal_opts, Some(sync_config), &surreal2)
        .await?;

    // Verify checkpoint emission (t1 and t2 checkpoints)
    surreal_sync::testing::checkpoint::verify_t1_t2_checkpoints(".test-checkpoints")?;

    // Insert test data into MySQL (data only, tables already exist with triggers)

    surreal_sync::testing::mysql::insert_rows(&mut mysql_conn, &dataset).await?;

    // Read the t1 checkpoint file generated by migrate_from_mysql_with_checkpoints
    // This contains the checkpoint captured before full sync started
    let sync_checkpoint =
        surreal_sync::checkpoint::get_first_checkpoint_from_dir(".test-checkpoints").await?;

    // Run incremental sync using the checkpoint
    surreal_sync::mysql::run_incremental_sync(
        source_opts,
        surreal_config.surreal_namespace.clone(),
        surreal_config.surreal_database.clone(),
        surreal_opts,
        sync_checkpoint,
        chrono::Utc::now() + chrono::Duration::hours(1), // 1 hour deadline
        None, // No target checkpoint - sync all available changes
    )
    .await?;

    surreal_sync::testing::surrealdb::assert_synced(
        &surreal,
        &dataset,
        "MySQL incremental sync only",
    )
    .await?;

    surreal_sync::testing::mysql::cleanup_mysql_test_data(&mut mysql_conn).await?;

    // Close connection
    drop(mysql_conn);
    pool.disconnect().await?;

    Ok(())
}

//! Neo4j all-types incremental sync ONLY E2E test
//!
//! This test validates that Neo4j incremental sync operations work correctly
//! by starting with empty nodes, running full sync to generate checkpoint,
//! then adding data and running incremental sync.

use surreal_sync::testing::{
    connect_surrealdb, create_unified_full_dataset, generate_test_id, TestConfig,
};
use surreal_sync::{SourceOpts, SurrealOpts};

#[tokio::test]
async fn test_neo4j_incremental_sync_lib() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize tracing for debug output
    tracing_subscriber::fmt()
        .with_env_filter("surreal_sync=debug")
        .try_init()
        .ok();

    let test_id = generate_test_id();

    // Clean up checkpoint directory to prevent cross-test contamination
    surreal_sync::testing::checkpoint::cleanup_checkpoint_dir(".test-checkpoints")?;

    // Setup Neo4j connection
    let neo4j_config = surreal_sync::testing::neo4j::Neo4jConfig::default();
    let graph_config = neo4rs::ConfigBuilder::default()
        .uri(neo4j_config.get_uri())
        .user(neo4j_config.get_username())
        .password(neo4j_config.get_password())
        .db(neo4j_config.get_database())
        .build()?;
    let graph = neo4rs::Graph::connect(graph_config)?;

    let t1 = chrono::Utc::now();

    let dataset = create_unified_full_dataset();

    // Setup SurrealDB connection
    let surreal_config = TestConfig::new(test_id, "neo4j-incremental-only");
    let surreal = connect_surrealdb(&surreal_config).await?;
    surreal_sync::testing::test_helpers::cleanup_surrealdb(&surreal, &dataset).await?;

    // Clean up any existing test data
    surreal_sync::testing::neo4j::delete_nodes_and_relationships(&graph).await?;

    // Create schema/constraints but don't insert data yet
    surreal_sync::testing::neo4j::create_constraints_and_indices(&graph, &dataset).await?;

    let source_opts = SourceOpts {
        source_uri: neo4j_config.get_uri(),
        source_database: Some(neo4j_config.get_database()),
        source_username: Some(neo4j_config.get_username()),
        source_password: Some(neo4j_config.get_password()),
        neo4j_timezone: "UTC".to_string(),
        neo4j_json_properties: Some(vec![
            "all_types_users.metadata".to_string(),
            "all_types_posts.post_categories".to_string(),
        ]),
        mysql_boolean_paths: None,
    };

    let surreal_opts = SurrealOpts {
        surreal_endpoint: surreal_config.surreal_endpoint.clone(),
        surreal_username: "root".to_string(),
        surreal_password: "root".to_string(),
        batch_size: 1000,
        dry_run: false,
    };

    // Create a sync config for checkpoint emission
    let sync_config = surreal_sync::sync::SyncConfig {
        incremental: false, // This is full sync with empty data
        incremental_from: None,
        emit_checkpoints: true,
        checkpoint_dir: Some(".test-checkpoints".to_string()),
    };

    // Run full sync with empty data to get checkpoint (t1)
    surreal_sync::neo4j::run_full_sync(
        source_opts.clone(),
        surreal_config.surreal_namespace.clone(),
        surreal_config.surreal_database.clone(),
        surreal_opts.clone(),
        Some(sync_config),
    )
    .await?;

    // Verify checkpoint emission (t1 and t2 checkpoints)
    surreal_sync::testing::checkpoint::verify_t1_t2_checkpoints(".test-checkpoints")?;

    // Now insert test data into Neo4j (with timestamps for incremental tracking)
    surreal_sync::testing::neo4j::create_nodes(&graph, &dataset).await?;

    // // Read the t1 checkpoint file generated by migrate_from_neo4j_with_checkpoints
    // // This contains the checkpoint captured before full sync started
    // let sync_checkpoint =
    //     surreal_sync::checkpoint::get_first_checkpoint_from_dir(".test-checkpoints").await?;

    // Run incremental sync using the checkpoint
    surreal_sync::neo4j::run_incremental_sync(
        source_opts,
        surreal_config.surreal_namespace.clone(),
        surreal_config.surreal_database.clone(),
        surreal_opts,
        surreal_sync::sync::SyncCheckpoint::Neo4j(t1),
        chrono::Utc::now() + chrono::Duration::hours(1), // 1 hour deadline
        None, // No target checkpoint - sync all available changes
    )
    .await?;

    surreal_sync::testing::surrealdb::assert_synced(
        &surreal,
        &dataset,
        "Neo4j incremental sync only",
    )
    .await?;

    surreal_sync::testing::neo4j::delete_nodes_and_relationships(&graph).await?;

    Ok(())
}
